.TH HTMLIOS 1 "August 2013" "htmlios" "HTML renderer of textios"
.\" -------------------------------------------------------------------
.SH NAME
htmlios \- render monitoring information as HTML
.\" -------------------------------------------------------------------
.SH SYNOPSIS
\fBhtmlios\fP [\fIOPTION...\fP] \fILOCATION\fP [\fILOCATION...\fP]
.\" -------------------------------------------------------------------
.SH DESCRIPTION
\fBhtmlios\fP is meant to render monitoring information of one or more
Icinga/Nagios instances as HTML files.
.P
\fBhtmlios\fP is a non-interactive tool. It works on the information
downloaded by \fBtextios\fP(1), renders a HTML file and then quits. It
supports way more filtering than \fBtextios\fP(1) does.
.\" -------------------------------------------------------------------
.SH OPTIONS
By default, \fBhtmlios\fP will show all the information that textios has
downloaded. The HTML file will be written to \fBstdout\fP. You can apply
several filters as follows.
.TP
.B \-t \fITITLE\fP
Create a title area in the HTML file. This is useful if you're
monitoring several locations.
.TP
.B \-e \fIHOST1\fP \fIHOST2\fP \fIHOST3\fP \fI...\fP
This will exclude the given hosts. Use spaces to separate them.
.TP
.B \-E \fISERVICE1\fP \fISERVICE2\fP \fISERVICE3\fP \fI...\fP
This will exclude the given services. Use spaces to separate them.
.TP
.B \-o \fISERVICE1\fP \fISERVICE2\fP \fISERVICE3\fP \fI...\fP
This will include \fBonly\fP the given services. Use commas to separate
them.
.TP
.B \-i \fIPATH\fP
Location where \fBtextios\fP stored its data. Defaults to
\fI/tmp/raw-textios-data\fP.
.P
After these options, you must specify one or more locations separated by
spaces. For example, if you've configured the locations \(lqffm\(rq,
\(lqber\(rq and \(lqnur\(rq, you'd have to use the following command to
only display information for \(lqffm\(rq and \(lqber\(rq:
.P
.nf
\f(CW
\&	$ htmlios ffm ber
\fP
.fi
.\" -------------------------------------------------------------------
.SH EXAMPLES
\fBhtmlios\fP is quite flexible. In particular, it allows you to fetch
all information once (using \fBtextios\fP) and render multiple HTML
files from it:
.P
.nf
\f(CW
\&	textios -a -c /tmp/raw-textios-data
\&
\&	htmlios -E UPDATES -t 'Office' office >office.html
\&	htmlios -E UPDATES -t 'Colo' colo >colo.html
\&	htmlios -o UPDATES -t 'Updates' office colo >all-updates.html
\fP
.fi
.P
You'll most likely want to run \fBhtmlios\fP from \fBcron\fP(1) or in a
loop:
.P
.nf
\f(CW
\&	while sleep 30
\&	do
\&		textios -a -c /tmp/raw-textios-data
\&
\&		htmlios ... >status.new.html
\&		mv status.new.html status.html
\&
\&		rm -Rf /tmp/raw-textios-data
\&	done
\fP
.fi
.P
You may wonder about the usage of \fBmv\fP(1). Here's why: \fBhtmlios\fP
includes a refresh command in the HTML header. This means that while
\fBhtmlios\fP is still writing the HTML files, your browser \fBmight\fP
be in the process of refreshing the page. This would lead to a corrupt
page, probably simply an error message in the browser. Thus, we first
render the new file and then rename it. On Linux, this is an atomic
step, so the browser won't complain.
.\" -------------------------------------------------------------------
.SH BUGS
Currently, no bugs are known. If you find one, we invite you to report
it at the GitHub Issue tracker (http://github.com/vain/textios/issues).
.\" -------------------------------------------------------------------
.SH AUTHORS
See the accompanying \fILICENSE\fP file.
.\" -------------------------------------------------------------------
.SH "SEE ALSO"
.BR textiosrc (5),
.BR textios (1),
.BR vim (1),
.BR curl (1)
