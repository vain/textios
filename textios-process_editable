#!/usr/bin/env python2.7
# coding: utf-8

import sys
import re
import datetime
import subprocess

def comment_quote(comment):
    if comment.lower() not in ['q', 'quote']:
        return comment
    else:
        try:
            return subprocess.check_output(['random-quote']).strip()
        except:
            return comment

author = sys.argv[1]
url = sys.argv[2]

for line in sys.stdin.readlines():
    # Split at nbsp:
    tokens = [i.strip() for i in line.split('Â ')]

    cmd = tokens[0]
    host = tokens[1]
    service = tokens[2]
    is_host = tokens[3].strip() == ''

    # Allowed commands:
    #  ack
    #  ack whatever foo bar some comment
    m = re.search(r'^ack( (.*))?', cmd, re.I)
    if m:
        comment = m.group(2) or 'Acknowledged'
        comment = comment_quote(comment)
        if is_host:
            print 'ack host problem on {}: "{}"'.format(host, comment)
            curlcmd = ['curl', '-nsLk', '--fail', url,
                       '--data', 'cmd_typ=33',
                       '--data', 'cmd_mod=2',
                       '--data', 'com_author={}'.format(author),
                       '--data', 'host={}'.format(host),
                       '--data', 'com_data={}'.format(comment),
                       '--data', 'sticky_ack=1',
                       '--data', 'send_notification=1',
                       '--data', 'persistent=1']
        else:
            print 'ack {} on {}: "{}"'.format(service, host, comment)
            curlcmd = ['curl', '-nsLk', '--fail', url,
                       '--data', 'cmd_typ=34',
                       '--data', 'cmd_mod=2',
                       '--data', 'com_author={}'.format(author),
                       '--data', 'host={}'.format(host),
                       '--data', 'service={}'.format(service),
                       '--data', 'com_data={}'.format(comment),
                       '--data', 'sticky_ack=1',
                       '--data', 'send_notification=1',
                       '--data', 'persistent=1']
        with open('/dev/null', 'w') as fp:
            ret = subprocess.call(curlcmd, stdout=fp)
            if ret != 0:
                sys.stderr.write('Failed: {}\n'.format(ret))

    # Allowed commands:
    #
    #  down
    #  down date comment
    #  down date time comment
    #  down time comment
    #
    # - "date" defaults to today.
    # - "time" defaults to 12:00.
    # - "time" format is always "%H:%M", leading zeroes mandatory.
    # - "hdown" instead of "down" for host downtimes.
    m = re.search(r'^(h?)down( (\+\d+|(\d{4}-\d{2}-\d{2})? ?(\d{2}:\d{2})?) ?(.*))?',
                  cmd, re.I)
    if m:
        two_hours_later = datetime.datetime.now() + datetime.timedelta(hours=2)

        host_downtime = False
        if m.group(1) == 'h':
            host_downtime = True

        if not m.group(3) or not m.group(3).startswith('+'):
            if not m.group(4) and not m.group(5):
                date = two_hours_later.strftime('%Y-%m-%d')
            elif not m.group(4) and m.group(5):
                date = datetime.datetime.now().strftime('%Y-%m-%d')
            else:
                date = m.group(4)

            if not m.group(5) and not m.group(4):
                time = two_hours_later.strftime('%H:%M') + ':00'
            elif not m.group(5) and m.group(4):
                time = '12:00:00'
            else:
                time = m.group(5) + ':00'
        else:
            added = datetime.datetime.now() + \
                    datetime.timedelta(hours=int(m.group(3)))
            date = added.strftime('%Y-%m-%d')
            time = added.strftime('%H:%M:00')

        comment = m.group(6) or 'Scheduled Downtime'
        comment = comment_quote(comment)
        starttime = datetime.datetime.now().strftime('%F %T')

        if host_downtime:
            print 'host downtime for {} until {} {}: "{}"'.format(host,
                                                            date, time, comment)
            curlcmd = [
                       'curl', '-nsLk', '--fail', url,
                       '--data', 'cmd_typ=55',
                       '--data', 'cmd_mod=2',
                       '--data', 'com_author={}'.format(author),
                       '--data', 'host={}'.format(host),
                       '--data', 'com_data={}'.format(comment),
                       '--data', 'start_time={}'.format(starttime),
                       '--data', 'end_time={} {}'.format(date, time),
                       '--data', 'fixed=1',
                      ]
        else:
            print 'service downtime for {} on {} until {} {}: "{}"'.format(
                                             service, host, date, time, comment)
            curlcmd = [
                       'curl', '-nsLk', '--fail', url,
                       '--data', 'cmd_typ=56',
                       '--data', 'cmd_mod=2',
                       '--data', 'com_author={}'.format(author),
                       '--data', 'host={}'.format(host),
                       '--data', 'service={}'.format(service),
                       '--data', 'com_data={}'.format(comment),
                       '--data', 'start_time={}'.format(starttime),
                       '--data', 'end_time={} {}'.format(date, time),
                       '--data', 'fixed=1',
                      ]
        with open('/dev/null', 'w') as fp:
            ret = subprocess.call(curlcmd, stdout=fp)
            if ret != 0:
                sys.stderr.write('Failed, curl error {}\n'.format(ret))

    # Allowed commands:
    #  again
    # Schedules a check for the given services right now.
    if cmd.lower() == 'again':
        now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        if is_host:
            print 'rescheduling a host check not supported'
        else:
            print 'rescheduling {} on {}'.format(service, host)
            curlcmd = ['curl', '-nsLk', '--fail', url,
                       '--data', 'cmd_typ=7',
                       '--data', 'cmd_mod=2',
                       '--data', 'host={}'.format(host),
                       '--data', 'service={}'.format(service),
                       '--data', 'start_time={}'.format(now),
                       '--data', 'force_check=1']
        with open('/dev/null', 'w') as fp:
            ret = subprocess.call(curlcmd, stdout=fp)
            if ret != 0:
                sys.stderr.write('Failed: {}\n'.format(ret))
