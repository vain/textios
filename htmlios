#!/usr/bin/env python2
# coding: utf-8

import argparse
from operator import itemgetter
import json
from string import Template
import sys

html = Template(u"""<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="refresh" content="10">

    <style type="text/css">
    html {
        background-color: #000000;
        font-family: Oswald;
        height: 100%;
    }
    body {
        height: 100%;
        overflow: hidden;
        margin: 0;
    }
    body.ok {
        background: #00ff06;
        background: -moz-linear-gradient(top, #00ff06 0%, #007f00 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #00ff06), color-stop(100%, #007f00));
        background: -webkit-linear-gradient(top, #00ff06 0%, #007f00 100%);
        background: linear-gradient(to bottom, #00ff06 0%, #007f00 100%);
    }
    body.warning {
        background: #b28800;
        background: -moz-linear-gradient(top, #b28800 0%, #4c3a00 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #b28800), color-stop(100%, #4c3a00));
        background: -webkit-linear-gradient(top, #b28800 0%, #4c3a00 100%);
        background: linear-gradient(to bottom, #b28800 0%, #4c3a00 100%);
    }
    body.warning div.allokay { display: none; }
    body.unknown {
        background: #7402cc;
        background: -moz-linear-gradient(top, #7402cc 0%, #3a0166 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #7402cc), color-stop(100%, #3a0166));
        background: -webkit-linear-gradient(top, #7402cc 0%, #3a0166 100%);
        background: linear-gradient(to bottom, #7402cc 0%, #3a0166 100%);
    }
    body.unknown div.allokay { display: none; }
    body.critical, body.failed {
        background: #7f0000;
        background: -moz-linear-gradient(top, #7f0000 0%, #300000 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #7f0000), color-stop(100%, #300000));
        background: -webkit-linear-gradient(top, #7f0000 0%, #300000 100%);
        background: linear-gradient(to bottom, #7f0000 0%, #300000 100%);
    }
    body.critical div.allokay, body.failed div.allokay { display: none; }
    div.title {
        background-color: rgba(0,0,0, 0.4);
        color: #eeeeee;
        font-size: 48px;
        padding-top: 7px;
        padding-bottom: 6px;
        text-align: center;
        width: 100%;
    }
    table {
        width: 100%;
        border-spacing: 0;
    }
    @-moz-keyframes smiley {
        0% { opacity: 0.03 }
        50% { opacity: 0.3 }
        100% { opacity: 0.03 }
    }
    @-webkit-keyframes smiley {
        0% { opacity: 0.03 }
        50% { opacity: 0.3 }
        100% { opacity: 0.03 }
    }
    @keyframes smiley {
        0% { opacity: 0.03 }
        50% { opacity: 0.2 }
        100% { opacity: 0.03 }
    }
    div.allokay {
        font-size: 700px;
        height: 700px;
        margin-top: -580px;
        opacity: 0.03;
        position: fixed;
        text-align: center;
        top: 50%;
        width: 100%;

        -webkit-animation-duration: 4s;
        -moz-animation-duration: 4s;
        animation-duration: 4s;
        -webkit-animation-name: smiley;
        -moz-animation-name: smiley;
        animation-name: smiley;
    }
    tr { width: 100%; text-shadow: 1px 1px 0px rgba(255, 255, 255, 0.4); }
    tr.soft td {
          background: rgba(255, 255, 255, 0.2);
          text-shadow: 1px 1px 0px rgba(255, 255, 255, 0.2);
    }
    tr.warning {
        background: #ffd519;
        background: -moz-linear-gradient(top,  #ffd519 0%, #e5bf16 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#ffd519), color-stop(100%,#e5bf16));
        background: -webkit-linear-gradient(top,  #ffd519 0%,#e5bf16 100%);
        background: linear-gradient(to bottom,  #ffd519 0%,#e5bf16 100%);
    }
    tr.warning.detail { background: #e5bf16; }
    tr.warning.soft { color: #A68700; }
    tr.warning.soft.detail { color: #A68700; }
    tr.critical, tr.failed {
        background: #ff0000;
        background: -moz-linear-gradient(top,  #ff0000 0%, #d30000 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#ff0000), color-stop(100%,#d30000));
        background: -webkit-linear-gradient(top,  #ff0000 0%,#d30000 100%);
        background: linear-gradient(to bottom,  #ff0000 0%,#d30000 100%);
    }
    tr.critical.detail, tr.failed.detail { background: #d30000; }
    tr.critical.soft { color: #8C0000; }
    tr.critical.soft.detail { color: #8C0000; }
    tr.unknown {
        background: #ff32ff;
        background: -moz-linear-gradient(top,  #ff32ff 0%, #cc3dcc 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#ff32ff), color-stop(100%,#cc3dcc));
        background: -webkit-linear-gradient(top,  #ff32ff 0%,#cc3dcc 100%);
        background: linear-gradient(to bottom,  #ff32ff 0%,#cc3dcc 100%);
    }
    tr.unknown.detail { background: #cc3dcc; }
    tr.unknown.soft { color: #A800A8; }
    tr.unknown.soft.detail { color: #A800A8; }
    tr.ok {
        background: #00ff06;
        background: -moz-linear-gradient(top,  #00ff06 0%, #00cc00 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#00ff06), color-stop(100%,#00cc00));
        background: -webkit-linear-gradient(top,  #00ff06 0%,#00cc00 100%);
        background: linear-gradient(to bottom,  #00ff06 0%,#00cc00 100%);
    }
    tr.ok.detail { background: #00cc00; }
    tr.ok.soft { color: #00A803; }
    tr.ok.soft.detail { color: #00A803; }
    td {
        font-size: 60px;
        padding-top: 10px;
        padding-bottom: 9px;
        padding-left: 15px;
        padding-right: 10px;
    }
    tr.detail td {
        font-size: 22px;
        padding-top: 0;
        white-space: nowrap;
    }
    </style>
</head>
<body class="ok $bodyclasses">
    $title
    <div class="allokay">☺</div>
    <table>
$tablerows
    </table>
</body>
</html>
""")

parser = argparse.ArgumentParser()
parser.add_argument('-e', '--exclude_hosts', nargs='+', default=[])
parser.add_argument('-E', '--exclude_services', nargs='+', default=[])
parser.add_argument('-o', '--only_services', nargs='+', default=[])
parser.add_argument('-t', '--title')
parser.add_argument('-i', '--input', default='/tmp/raw-textios-data')
parser.add_argument('location', nargs='+')
args = parser.parse_args()

title = '<div class="title">{}</div>'.format(args.title) if args.title else ''

buffered = []
statusmapping = {
    'failed': 0,
    'critical': 1,
    'unknown': 2,
    'warning': 3,
    'ok': 4,
}
hoststatusmapping = {
    'down': 'critical',
    'unreachable': 'unknown',
    'up': 'ok',
}
statusmappinginv = { v: k for k, v in statusmapping.items() }

for l in args.location:
    try:
        with open('{}/{}/hosts.json'.format(args.input, l), 'r') as fp:
            info_hosts = json.load(fp)

        with open('{}/{}/services.json'.format(args.input, l), 'r') as fp:
            info_services = json.load(fp)
    except:
        buffered.append((l, 'FAILED', statusmapping['failed'], False,
                         'Unable to read textios data.', False))
        continue

    hosts_downtime = set(args.exclude_hosts)
    for host in info_hosts['status']['host_status']:
        if host['in_scheduled_downtime']:
            hosts_downtime.add(host['host_name'])
            continue

        if host['status'].lower() in ['up', 'pending']:
            continue

        buffered.append((host['host_display_name'], 'HOST',
                         statusmapping[hoststatusmapping[host['status'].lower()]],
                         host['state_type'] == 'SOFT', 'Host problem',
                         host['has_been_acknowledged']))

    for service in info_services['status']['service_status']:
        if service['status'].lower() in ['ok', 'pending']:
            continue

        if service['host_name'] in hosts_downtime or \
            service['in_scheduled_downtime']:
            continue

        if args.only_services and service['service_display_name'] not in \
            args.only_services:
            continue

        if args.exclude_services and service['service_display_name'] \
            in args.exclude_services:
            continue

        buffered.append((service['host_display_name'],
                         service['service_display_name'],
                         statusmapping[service['status'].lower()],
                         service['state_type'] == 'SOFT',
                         service['status_information'],
                         service['has_been_acknowledged']))

buffered = sorted(buffered, key=itemgetter(3, 2, 0, 1))

bodyclasses = set()
tablerows = ''

for host, service, numericalstatus, soft, detail, acked in buffered:
    status = statusmappinginv[numericalstatus]
    hardness = u'soft' if soft else u'hard'
    acked = u'✓' if acked else u''
    bodyclasses.add(status)

    tablerows += (
        u'<tr class="{status} {hardness}">'
        u'<td class="host">{acked} {host}</td>'
        u'<td class="service">{service}</td>'
        u'</tr>\n'
        u'<tr class="detail {status} {hardness}">'
        u'<td></td><td>{detail}</td></tr>'
    ).format(
        status=status,
        hardness=hardness,
        host=host.replace(u'-', u'&#8209;'),
        service=service,
        detail=detail,
        acked=acked,
    )

complete = html.substitute(
    bodyclasses=u' '.join(bodyclasses),
    title=title,
    tablerows=tablerows,
)
print complete.encode('UTF-8')
